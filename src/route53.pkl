module `cfn-pkl-extras`.route53

import "pkl:Project"
import "patterns.pkl"
import "customResources.pkl"
import "@cfn/cloudformation.pkl"
import "@cfn/aws/route53/hostedzone.pkl"
import "@cfn/aws/route53/recordset.pkl"
import "@cfn/aws/route53/dnssec.pkl"
import "@cfn/aws/route53/keysigningkey.pkl"
import "@cfn/aws/kms/key.pkl"


const domainNameRegex = #"[A-Za-z0-9-_]{1,63}(?<!-)(\.[A-Za-z0-9-_]{1,63}(?<!-))*\.[A-Za-z]{2,}"#

const validDomainNameRegex: Regex = Regex("^\(domainNameRegex)$")

typealias ValidDomainName = String(matches(validDomainNameRegex))


class DomainName {
  name: ValidDomainName
  dnssec: Boolean = false
  fixed resourceName: patterns.ResourceName = name.replaceAll(patterns.resourceNameInvalidRegex, "")

  // causes StackOverflow
  //  fixed apex: DomainName = new DomainName { name = parts.takeLast(2).join(".") }
  fixed apex: String = name.split(".").takeLast(2).join(".")
  fixed apexResourceName: patterns.ResourceName = apex.replaceAll(patterns.resourceNameInvalidRegex, "")
}

// todo: phone constraints
typealias Phone = String

typealias NonEmptyString = String(!isEmpty)

typealias ContactType = "PERSON"|"COMPANY"|"ASSOCIATION"|"PUBLIC_BODY"|"RESELLER"

typealias CountryCode = "AC"|"AD"|"AE"|"AF"|"AG"|"AI"|"AL"|"AM"|"AN"|"AO"|"AQ"|"AR"|"AS"|"AT"|"AU"|"AW"|"AX"|"AZ"|"BA"|"BB"|"BD"|"BE"|"BF"|"BG"|"BH"|"BI"|"BJ"|"BL"|"BM"|"BN"|"BO"|"BQ"|"BR"|"BS"|"BT"|"BV"|"BW"|"BY"|"BZ"|"CA"|"CC"|"CD"|"CF"|"CG"|"CH"|"CI"|"CK"|"CL"|"CM"|"CN"|"CO"|"CR"|"CU"|"CV"|"CW"|"CX"|"CY"|"CZ"|"DE"|"DJ"|"DK"|"DM"|"DO"|"DZ"|"EC"|"EE"|"EG"|"EH"|"ER"|"ES"|"ET"|"FI"|"FJ"|"FK"|"FM"|"FO"|"FR"|"GA"|"GB"|"GD"|"GE"|"GF"|"GG"|"GH"|"GI"|"GL"|"GM"|"GN"|"GP"|"GQ"|"GR"|"GS"|"GT"|"GU"|"GW"|"GY"|"HK"|"HM"|"HN"|"HR"|"HT"|"HU"|"ID"|"IE"|"IL"|"IM"|"IN"|"IO"|"IQ"|"IR"|"IS"|"IT"|"JE"|"JM"|"JO"|"JP"|"KE"|"KG"|"KH"|"KI"|"KM"|"KN"|"KP"|"KR"|"KW"|"KY"|"KZ"|"LA"|"LB"|"LC"|"LI"|"LK"|"LR"|"LS"|"LT"|"LU"|"LV"|"LY"|"MA"|"MC"|"MD"|"ME"|"MF"|"MG"|"MH"|"MK"|"ML"|"MM"|"MN"|"MO"|"MP"|"MQ"|"MR"|"MS"|"MT"|"MU"|"MV"|"MW"|"MX"|"MY"|"MZ"|"NA"|"NC"|"NE"|"NF"|"NG"|"NI"|"NL"|"NO"|"NP"|"NR"|"NU"|"NZ"|"OM"|"PA"|"PE"|"PF"|"PG"|"PH"|"PK"|"PL"|"PM"|"PN"|"PR"|"PS"|"PT"|"PW"|"PY"|"QA"|"RE"|"RO"|"RS"|"RU"|"RW"|"SA"|"SB"|"SC"|"SD"|"SE"|"SG"|"SH"|"SI"|"SJ"|"SK"|"SL"|"SM"|"SN"|"SO"|"SR"|"SS"|"ST"|"SV"|"SX"|"SY"|"SZ"|"TC"|"TD"|"TF"|"TG"|"TH"|"TJ"|"TK"|"TL"|"TM"|"TN"|"TO"|"TP"|"TR"|"TT"|"TV"|"TW"|"TZ"|"UA"|"UG"|"US"|"UY"|"UZ"|"VA"|"VC"|"VE"|"VG"|"VI"|"VN"|"VU"|"WF"|"WS"|"YE"|"YT"|"ZA"|"ZM"|"ZW"

class Contact {
  firstName: NonEmptyString
  lastName: NonEmptyString
  type: ContactType
  addressLine1: NonEmptyString
  city: NonEmptyString
  state: NonEmptyString
  countryCode: CountryCode
  zipCode: NonEmptyString
  phoneNumber: Phone
  email: Project.EmailAddress
}

const domainCustomResource = new customResources.CustomResource {
  resourceName = "Domain"
  source = new customResources.Repo {
    runtime = "python3.13"
    handler = "index.handler"
    timeout = 10.s
    gitHubOrgRepo = "jamesward/cfn-domain-resource"
    commit = "546c24f8518e5ed8d6fa2d1424cbbe6a85d45370"
  }
  managedPolicyArns {
    "arn:aws:iam::aws:policy/AmazonRoute53DomainsFullAccess"
  }
}

class Domain {
  domainName: DomainName
  contact: Contact
  transferAuthCode: (String | Mapping)?
  nameServers: Listing<ValidDomainName> | Mapping
  autoRenew: Boolean

  fixed resources: Mapping<patterns.ResourceName, cloudformation.Resource> =
    new {
      ["\(domainName.apexResourceName)Domain"] =
        domainCustomResource.instance(new Mapping {
          ["DomainName"] = domainName.apex
          ["Contact"] = contact
          ["TransferAuthCode"] = transferAuthCode
          when (!nameServers.isEmpty) {
            ["NameServers"] = nameServers
          }
          ["AutoRenew"] = autoRenew
        })
    }
}

typealias DomainRecordType = "A" | "AAAA" | "CNAME" | "TXT" | "MX" | "NS" | "SOA" | "SRV" | "PTR" | "CAA" | "DNSKEY" | "DS" | "NAPTR" | "SSHFP" | "TLSA"

typealias ApexDomainName = String(matches(Regex(#"[a-zA-Z0-9-]+\.[a-zA-Z]{2,}"#)))


class DomainRecord {
  sub: String?
  type: DomainRecordType
  ttl: Duration(this >= 30.s)?
  // todo: value: String | Listing<String>
  values: Listing<String>(!isEmpty)
}

hostedZoneCustomResource = new customResources.CustomResource {
  resourceName = "HostedZoneManager"
  source = new customResources.Repo {
    runtime = "python3.9"
    handler = "index.handler"
    timeout = 10.s
    gitHubOrgRepo = "jamesward/cfn-hostedzone-resource"
    commit = "f90286ec969759d9a8d7062710d8837d825e77ab"
  }
  managedPolicyArns {
    "arn:aws:iam::aws:policy/AmazonRoute53DomainsFullAccess"
  }
  allow {
    actions {
      "route53:GetHostedZone"
      "route53:ListResourceRecordSets"
      "route53:ChangeResourceRecordSets"
      "route53:DeleteHostedZone"
      "route53domains:UpdateDomainNameservers"
    }
    resource {
      // todo: need Sub?
      cloudformation.Sub("arn:aws:route53:::hostedzone/*")
    }
  }
}

// the reason for the HostedZoneManager is because HostedZone can't be deleted when there are non-NS records associated with it
// and the Certificate creates an additional CNAME record which prevents deletion
function hostedZone(domainName: DomainName): Mapping<patterns.ResourceName, cloudformation.Resource> =
  new {
    ["\(domainName.apexResourceName)HostedZone"] = new hostedzone.HostedZone {
      Name = domainName.apex
    }

    when (domainName.dnssec) {
      ["\(domainName.apexResourceName)HostedZoneDNSSEC"] = new dnssec.DNSSEC {
        DependsOn {
          "\(domainName.apexResourceName)HostedZoneKSK"
        }
        HostedZoneId = cloudformation.Ref("\(domainName.apexResourceName)HostedZone")
      }

      ["\(domainName.apexResourceName)HostedZoneKey"] = new key.Key {
        KeySpec = "ECC_NIST_P256"
        KeyUsage = "SIGN_VERIFY"
        KeyPolicy {
          Version = "2012-10-17"
          Id = "dnssec-policy"
          Statement {
            new {
              Sid = "Enable IAM User Permissions"
              Effect = "Allow"
              Principal {
                AWS = cloudformation.Sub("arn:aws:iam::${AWS::AccountId}:root")
              }
              Action = "kms:*"
              Resource = "*"
            }
            new {
              Sid = "Allow Route 53 DNSSEC Service"
              Effect = "Allow"
              Principal {
                Service = "dnssec-route53.amazonaws.com"
              }
              Action {
                "kms:DescribeKey"
                "kms:GetPublicKey"
                "kms:Sign"
              }
              Resource = "*"
            }
            new {
              Sid = "Allow Route 53 DNSSEC to CreateGrant"
              Effect = "Allow"
              Principal {
                Service = "dnssec-route53.amazonaws.com"
              }
              Action = "kms:CreateGrant"
              Resource = "*"
            }
          }
        }
      }

      ["\(domainName.apexResourceName)HostedZoneKSK"] = new keysigningkey.KeySigningKey {
        Name = domainName.apexResourceName
        HostedZoneId = cloudformation.Ref("\(domainName.apexResourceName)HostedZone")
        KeyManagementServiceArn = cloudformation.GetAtt("\(domainName.apexResourceName)HostedZoneKey", "Arn")
        Status = "ACTIVE"
      }
    }

    ["\(domainName.apexResourceName)HostedZoneCleanup"] =
      hostedZoneCustomResource.instance(new Mapping {
        ["DomainName"] = domainName.apex
        ["HostedZoneId"] = cloudformation.Ref("\(domainName.apexResourceName)HostedZone")
      })
  }


function apexAndRecordToDomainName(apexDomain: ApexDomainName, domainRecord: DomainRecord): Pair<DomainName, DomainRecord> =
  let (key = if (domainRecord.sub != null) "\(domainRecord.sub).\(apexDomain)" else apexDomain)
    Pair(new DomainName { name = key }, domainRecord)

function stringChunkR(s: String, length: Int, parts: List<String>): List<String> =
  if (s.length > length)
    stringChunkR(s.drop(length), length, parts.add(s.take(length)))
  else
    parts.add(s)

function stringChunk(s: String, length: Int): List<String> =
  stringChunkR(s, length, List())

function domainRecordToResourceRecords(domainRecord: DomainRecord): Listing<String> =
  domainRecord.values.toList().flatMap(
    (value: String) ->
      // max length of record is 255
      if (domainRecord.type == "TXT")
        stringChunk(value, 255).map((s) -> "\"\(s)\"")
      else
        List(value)
  ).toListing()

function domainRecords(apexDomain: ApexDomainName, records: Listing<DomainRecord>): Mapping<patterns.ResourceName, cloudformation.Resource> =
  new Mapping<patterns.ResourceName, cloudformation.Resource> {
    // todo: nicer
    for (domainNameAndRecord in records.toList().map((domainRecord) -> apexAndRecordToDomainName(apexDomain, domainRecord))) {
      ["\(domainNameAndRecord.first.resourceName)RecordSet\(domainNameAndRecord.second.type)"] = new recordset.RecordSet {
        HostedZoneId = cloudformation.Ref("\(domainNameAndRecord.first.apexResourceName)HostedZone")
        Name = domainNameAndRecord.first.name
        TypeProperty = domainNameAndRecord.second.type
        TTL = domainNameAndRecord.second.ttl?.toUnit("s")?.value?.toString() ?? "300" // default TTL
        ResourceRecords = domainRecordToResourceRecords(domainNameAndRecord.second)
      }
    }
  }
