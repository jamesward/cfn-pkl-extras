module `cfn-pkl-extras`.customResources

import "patterns.pkl"
import "@cfn/cloudformation.pkl" as cfn
import "@cfn/aws/codebuild/project.pkl" as codebuildproject
import "@cfn/aws/s3/bucket.pkl" as s3bucket
import "@cfn/aws/iam/role.pkl" as role
import "@cfn/aws/lambda/function.pkl" as lambdafunction

abstract class CodeOrRepo {
  runtime: String
  handler: String
  timeout: Duration
}

class Code extends CodeOrRepo {
  body: String
}

class Repo extends CodeOrRepo {
  gitHubOrgRepo: String(split("/").length == 2)
  commit: String?
}

class Allow {
  actions: Listing<String>
  resource: Listing
}

// todo: if the commit on a repo changes, rebuild the function and update all the custom resources that use it
class CustomResource {
  resourceName: patterns.ResourceName
  source: Code | Repo
  allow: Allow?
  managedPolicyArns: Listing<String>

  fixed resourcesForCodeOrRepo: Mapping<patterns.ResourceName, cfn.Resource> =
    new Mapping<patterns.ResourceName, cfn.Resource> {
      ["\(resourceName)Role"] = new role.Role {
        AssumeRolePolicyDocument {
          Statement {
            Effect = "Allow"
            Principal {
              Service = "lambda.amazonaws.com"
            }
            Action = "sts:AssumeRole"
          }
        }
        ManagedPolicyArns {
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
          ...managedPolicyArns
        }
        when (allow != null) {
          Policies {
            new {
              PolicyName = resourceName
              PolicyDocument {
                Version = "2012-10-17"
                Statement {
                  Effect = "Allow"
                  Action = allow.actions
                  Resource = allow.resource
                }
              }
            }
          }
        }
      }

      ["\(resourceName)Function"] = new lambdafunction.Function {
        Runtime = source.runtime
        Handler = source.handler
        Timeout = source.timeout.toUnit("s").value.toInt()
        Role = cfn.GetAtt("\(resourceName)Role", "Arn")
        when (source is Code) {
          Code {
            ZipFile = source.body
          }
        }
        when (source is Repo) {
          DependsOn {
            "\(resourceName)TriggerBuild"
//             "\(resourceName)BuildProject"
          }
//           Environment {
//             Variables {
//               // maybe cause the function to update after the build finishes
//               ["BUILD_VERSION"] = cfn.Ref("\(resourceName)TriggerBuild")
//             }
//           }
          Code {
            S3Bucket = cfn.Ref("\(resourceName)BuildBucket")
            S3Key = "function-\(source.commit).zip"
          }
        }
      }
    }

  function instance(properties: Mapping): cfn.Resource =
    new cfn.Resource {
      Type = "AWS::CloudFormation::CustomResource"
//       DependsOn {
//         "\(resourceName)Function"
//       }
      Properties = new Mapping {
        ["ServiceTimeout"] = (source.timeout + 1.min).toUnit("s").value.toInt()
        ["ServiceToken"] = cfn.GetAtt("\(resourceName)Function", "Arn")
        ...properties
      }
    }

  fixed resourcesForCode: Mapping<patterns.ResourceName, cfn.Resource> =
    resourcesForCodeOrRepo

  fixed resourcesForRepo: Mapping<patterns.ResourceName, cfn.Resource> =
    let (repo: Repo = source)
    let (topLevelResourceName = resourceName)
    let (triggerBuild = new CustomResource {
      resourceName = "\(topLevelResourceName)TriggerBuild"
      source = new Code {
        runtime = "python3.9"
        handler = "index.handler"
        timeout = 900.s
        body = read("resources/triggerbuild.py").text
      }
      allow = new Allow {
        actions {
          "codebuild:StartBuild"
          "codebuild:BatchGetBuilds"
        }
        resource {
          cfn.GetAtt("\(topLevelResourceName)BuildProject", "Arn")
        }
      }
    })
    let (cleanupBucket = new CustomResource {
      resourceName = "\(topLevelResourceName)CleanupBucket"
      source = new Code {
        runtime = "python3.9"
        handler = "index.handler"
        timeout = 900.s
        body = read("resources/cleanupbucket.py").text
      }
      allow = new Allow {
        actions {
          "s3:ListBucket"
          "s3:ListBucketVersions"
          "s3:DeleteObject"
          "s3:DeleteObjectVersion"
          "s3:GetObjectVersion"
        }
        resource {
          cfn.Sub("${\(topLevelResourceName)BuildBucket.Arn}")
          cfn.Sub("${\(topLevelResourceName)BuildBucket.Arn}/*")
        }
      }
    })

      new Mapping<patterns.ResourceName, cfn.Resource> {
        ["\(resourceName)BuildBucket"] = new s3bucket.Bucket {

        }

        ["\(resourceName)BuildProjectRole"] = new role.Role {
          AssumeRolePolicyDocument {
            Statement {
              Effect = "Allow"
              Principal {
                Service = "codebuild.amazonaws.com"
              }
              Action = "sts:AssumeRole"
            }
          }
          Policies {
            new {
              PolicyName = "S3Access"
              PolicyDocument {
                Version = "2012-10-17"
                Statement {
                  Effect = "Allow"
                  Action {
                    "s3:PutObject"
                    "s3:GetObject"
                    "s3:GetObjectVersion"
                  }
                  Resource = cfn.Sub("${\(resourceName)BuildBucket.Arn}/*")
                }
              }
            }
            new {
              PolicyName = "Logs"
              PolicyDocument {
                Version = "2012-10-17"
                Statement {
                  Effect = "Allow"
                  Action {
                    "logs:CreateLogGroup"
                    "logs:CreateLogStream"
                    "logs:PutLogEvents"
                  }
                  Resource = "*"
                }
              }
            }
          }
        }

        ...triggerBuild.resourcesForCode

        [triggerBuild.resourceName] = triggerBuild.instance(new Mapping {
          ["ProjectName"] = cfn.Ref("\(topLevelResourceName)BuildProject")
          // causes an update when the commit changes?
          ["SourceVersion"] = repo.commit
        })

        ...cleanupBucket.resourcesForCode

        [cleanupBucket.resourceName] = cleanupBucket.instance(new Mapping {
          ["BucketName"] = cfn.Ref("\(topLevelResourceName)BuildBucket")
        })

        ["\(resourceName)BuildProject"] = new codebuildproject.Project {
          ServiceRole = cfn.GetAtt("\(resourceName)BuildProjectRole", "Arn")
          Artifacts {
            Type = "S3"
            Location = cfn.Ref("\(resourceName)BuildBucket")
            Name = "function-\(repo.commit).zip"
            Packaging = "ZIP"
          }
          Source {
            Type = "GITHUB"
            Location = "https://github.com/\(repo.gitHubOrgRepo).git"
          }
          SourceVersion = repo.commit
          Environment {
            Type = "LINUX_CONTAINER"
            ComputeType = "BUILD_GENERAL1_SMALL"
            Image = "aws/codebuild/amazonlinux2-x86_64-standard:4.0"
          }
        }

        ...resourcesForCodeOrRepo
      }

  fixed resources: Mapping<patterns.ResourceName, cfn.Resource> =
    if (source is Code) resourcesForCode else resourcesForRepo
}
